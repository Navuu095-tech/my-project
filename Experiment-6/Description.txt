 1. HTML Structure:

 Header:
* A `<h2>` element displays the title:“SVG Drawing Tool”.

 Main Content:
 * Two buttons:

  * "Draw Mode" button (active by default).
  * "Clear All" button to clear the drawing area.
  * A `<svg>` element serves as the drawing canvas.
  * A short `<p>` hint guides users to "click and drag to draw".

 Tags Used:

  * Semantic tags like `<main>`, `<h2>`, `<div>`, `<button>`, `<svg>`, and `<p>`.
  * A wrapper `<main>` with class `.wrap` is used to organize and center content.

 2. CSS Layout & Styling:

 Layout:

  * All content is wrapped in `.wrap`, styled like a card.
  * Flexbox is used in the toolbar for button spacing.
  * The drawing canvas is placed inside a bordered frame.

Styles:

  * Light background and dark text for readability.
  * '.wrap' has padding, borders, rounded corners, and a soft box shadow.
  * Buttons are styled with border-radius and hover/focus-friendly designs.
  * Active button is highlighted in blue.
  * SVG canvas is styled with a background, border, and crosshair cursor.
  * Hint text is smaller and grey for subtle guidance.

 3. JavaScript Functionality:

 Theory:

  * JavaScript makes the SVG drawing interactive using mouse and touch events.
  * It tracks when the user starts, continues, and ends a drawing.

 Logic:

  * When user "presses mouse or touches screen", it starts a new SVG `<path>`.
  * As the user "moves", lines are added to the path to follow the cursor/finger.
  * When released, the current path is finished and stored.
  * "Clear All" button removes all drawings from the SVG.

Events Used:

  * `mousedown`, `mousemove`, `mouseup`, `mouseleave` for desktop users.
  * `touchstart`, `touchmove`, `touchend` for mobile/touch support.
  * `click` event for the clear button.

 4. Test Cases:

| Test Case             | Expected Result                                        |
                        |                                                        
| Page Load             | Title, buttons, and blank SVG canvas are shown.        |
| Drawing with mouse    | User can click and drag to draw lines.                 |
| Drawing with touch    | Touch input draws just like a mouse on mobile devices. |
| Releasing click/touch | Stroke is completed and saved on canvas.               |
| Clicking “Clear All”  | All drawings are erased instantly.                     |
| Responsiveness        | Layout works well on different screen sizes.           |
| Accessibility         | Buttons are keyboard-focusable and labeled clearly.    |

5. Key Learning Points:

* Learn how to use "SVG and `<path>`" to draw shapes dynamically.
* Understand how to handle "mouse and touch events".
* Practice "event-driven programming" in JavaScript.
* Gain skills in "DOM manipulation" using `createElementNS()` and attributes.
* Separate concerns: "HTML for structure", "CSS for design", and "JS for interaction".

6. Learning Outcomes:

* Learn to create an "interactive drawing ap" using HTML, CSS, and JS.
* Understand how to "draw lines using SVG and JavaScript logic".
* Practice "real-time drawing" by tracking cursor/touch positions.
* Build a "clean and responsive UI" for user interaction.
* Improve skills in "cross-device compatibility" (mouse + touch).
* Strengthen your understanding of "front-end development tools and events".

